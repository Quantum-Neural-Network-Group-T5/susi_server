# SUSI.AI Skill Language Tutorial
# This text is a placeholder for your own skills

###
### MUST READ:
### You can chat with Susi using the etherpad-attached chat (see box in the lower right window corner)
### A message to Susi MUST start with "@susi " (<at>susi<space>), like "@susi hi"
###


# Quick Intro to Susi Skill Language:
# - SUSI skills are just plain text files, or texts in etherpads.
# - comment lines start with '#'
# - each utterance + answer pair are simply two lines, first one for the utterance, second for the answer
# This notion is called the "Susi Language of Thought" ("LoT")
# 
# - Skills can be hosted as an etherpad page
# - The Susi Smart Speaker (hostname "susi") hosts an etherpad at http://susi.local:9001
# - By default the skill at http://susi.local:9001/p/susi is always loaded
# - the language of thought is translated internally into JSON, you can find the translation
#   for this skill at http://127.0.0.1:4000/susi/mind.json?dream=susi


### START OF SUSI TUTORIAL BELOW:
### IF YOU WANT TO KNOW HOW TO CALL AN API FROM SUSI, CHECK EXAMPLE 11
    

# EXAMPLE 0: Fixed Query-Answer Phrase Collections
# The first line is the question, the second line is the answer.

roses are red
SUSI is a hack



# EXAMPLE 1: Random Answers
# Susi answers with one of the words in the answer line.

What is your favorite food
Potatoes|Vegetables|Fish



# EXAMPLE 2: Query Alternatives
# Susi answers on any of the phrases in the question line

tea|tea earl grey|tea earl grey hot|earl grey|earl grey hot|tea hot
I am not yet connected to your replicator.



# EXAMPLE 3: Patterns in Queries
# Query patterns can be declared using the `*` wildcard character.
# A `*` matches any sentence token, but not a substring. That means a `*` replaces a word or a list of words.
# The answer line can be broken up with backslash characters to make a multi-line answer.

May I * you?
Yes!|No!|Maybe?|\
The voices in my head are telling me to say no.|\
I don't want to leave my comfort zone.


# EXAMPLE 4: Using Query-Patterns in Answers
# Usage of the phrase that matched the question with the variable $1$

May I get a *?
Yes you may get a $1$!



# EXAMPLE 5: Multiple Patterns in Queries and Answers
# Matching phrases are numbered.

For * I can buy a *
Yeah, I believe $1$ is a good price for a $2$

# You can also ignore one or any of the matched phrases.
# $0$ denotes the whole sentence, identical to what the user asked susi.

* buy a *
Sure, you should buy a $2$!



# EXAMPLE 6: storing variables
# Any phrase can be assigned to variables, also phrases that are created from other variables.
# In this case the variable $2$ is stored into _teatype.

I * like * tea
You then should have one $2$>_teatype tea!

# Note that the variable starts with a leading '\_'.
# That has a special meaning: variables without a leading '\_' are only valid while SUSI.AI is thinking about
# a phrase, not after the response has computed. SUSI.AI will not remember a variable if
# that variable was set in a past conversation and has not a leading '\_'.

# You can now use that variable in another rule:

* tea * best?
I bet you like $_teatype$ tea!

# Note that the `*` wildcards in the query are not used at all. They are just there
# to make it easy that this rule matches. It will i.e. match on "What tea type is the best?"



# EXAMPLE 7: Setting "Invisible" Status Variables
# The difference here is that the source of the assignment is not visible in the answer.

I am so happy!
Good for you!^excited^>_mood

I am bored.
Make something!^inactive^>_mood

How do I feel?
You are $_mood$.

# In this example, SUSI.AI remembers your mood and can tell you about it.
# The actual word which was used to describe the mood was never printed to the user before because using the `^^` symbols, it got quoted and became invisible.



# EXAMPLE 8: Conditions for Answers
# Answer lines beginning with a "?" start with a condition.
# The answer is only given if the condition is true.

How do I feel?
?$_mood$:You are $_mood$.:I don't know your mood.

Shall I *?
?$_mood$=excited:You will be happy, whatever I say!



# EXAMPLE 9: Rules used as Functions/Templates (Basic Self-Reflection)
# Answers may contain (possibly recursive) calls to other intents. It's like a function call.

any colour
red|green|blue|white|black|yellow|purple|brown

What is your favorite color?
?$_mycolour$:My favorite colour is $_mycolour$!:I like `any colour`>_mycolour!

# This will give a random colour after the first time "What is your favorite color" was asked,
# but the second time Susi is aked it will remember the colour.



# EXAMPLE 10: Embed Javascript into an intent
# The result from javascript computation is returned in $!$

javascript hello
!javascript:$!$ from Nashorn
print('Hello world');
eol

compute * to the power of *
!javascript:$1$^$2$ = $!$
Math.pow($1$, $2$)
eol



# EXAMPLE 11: Call an external API
# This requires that you provide two attributes:
# - the url to the API
# - a json path to the result

tweet about *
!console:$text$
{
  "url":"http://api.loklak.org/api/search.json?q=$1$",
  "path":"$.statuses"
}
eol

# Explanation:
#  * The JSON result contains a list which is denoted by the path $.statuses
#  * The object in the result list has an attribute named 'text', that is returned in the answer line as $text$



# EXAMPLE 12: Steering of Shelly Switch IoT Devices
# This uses API calls to non-cloud web services in your intranet
# as demonstrated and explained in detail in the video at
# https://www.youtube.com/watch?v=oxgQkQz_94M
# You need specific hardware for this, like
#   * https://shelly.cloud/shelly1-open-source/


switch on light|switch on the light
!console:ok
{
  "url":"http://192.168.1.52/relay/0?turn=on",
  "path":"$"
}
eol

switch off light|switch off the light
!console:ok
{
  "url":"http://192.168.1.52/relay/0?turn=off",
  "path":"$"
}
eol

what is the power consumption|what is the power consumption of light|what is the power consumption of the light|power consumption|power consumption of light|power consumption of the light
!console:$power$ watt
{
  "url":"http://192.168.1.52/status",
  "path":"$.meters"
}
eol



# EXAMPLE 13: Steering of NodeMCU / ESP 8266 IoT Devices
# This uses API calls to non-cloud web services in your intranet
# as demonstrated and explained in detail in the video at
# https://www.youtube.com/watch?v=oxgQkQz_94M
# You need specific hardware for this, like
#   * https://www.nodemcu.com
#   * https://www.espressif.com/en/products/socs/esp8266ex/overview
# Source code for NodeMCU / ESP 8266 is located in
# conf/etherpad_dream_lot_tutorial/nodemcu.ino


switch on led
!console:ok
{
  "url":"http://192.168.1.51/d4=1",
  "path":"$.a0"
}
eol

switch off led
!console:ok
{
  "url":"http://192.168.1.51/d4=0",
  "path":"$.a0"
}
eol

input | analog input | input value
!console:$!$
{
  "url":"http://192.168.1.51",
  "path":"$.a0"
}
eol
